input = '''...............e...........j6.....................
.....1...............................t.....i......
.....4.......3..............x..tL......m..........
.......L.....................Dxj..................
4....X..................F.....................m...
.............4.......x....F........k..............
......3...................t..........i.........Z..
....L..................y.....F..e.....Z...........
X.............1........C..........i...D...........
........4.....................D.....k.X...m.......
...1...............D........e......6..............
...3.Y...................................m8.......
..OL.........................x....Z....g..........
....3......5.........................6j...........
...................J..5r.F..k...y.................
.......................................Z..a.......
...........................5........j.........a.u.
...p..............Y....X..........................
...O.........................kd...................
........................t.................i.......
..................J..............u...........z....
.O.....9.............J..............p..u..........
.....9............................................
l...6.....1........e......I................a......
...................................az.............
........M.......J...................gI....z.......
.......Y...l...........p......g....d.......W......
........5l....9................d.....g............
.A....9.l.Y............I..............B.......s...
..................................K.....B.........
....M.............7.......8..........h.....K......
.......0f...oc..............G...d7.......z...s..yW
...M........0...........Gf.....................T..
................r......G..................w....h..
...........cP................G.8.R..............T.
.................A.............N............u..B..
..H.c..b............................K...CB.....y..
......c...bP...2............7..K..................
......b.o....0.......P.............s........h.R...
......2........f..S........8.....................R
U....2..............p..............7..............
.HE..b......A.............N..............w....C...
................................N.............w...
.........E...........M................W.......T...
......E...rS2...........W....................N....
.....SP..n.....r..0...............................
.....H..............A............................w
..........n..U....................s...............
..n.So.....U................f.....................
Ho................................................'''

example_input = '''............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............'''

def load_antenna_map(input):
    antennas = {}

    lines = input.split('\n')
    y = 0
    for line in lines:
        x = 0
        for frequency in line:
            if frequency != '.':
                if frequency not in antennas.keys():
                    antennas[frequency] = []
                antennas[frequency].append((x, y))
            x += 1
        map_width = x
        y += 1
    map_height = y

    frequencies = antennas.keys()
    return frequencies, antennas, map_height, map_width


def find_antinodes(pair, map_width, map_height):
    antinodes = []
    vx, vy = vector(pair)
    antinode = pair[0]
    while is_within_map(antinode, map_width, map_height):
        antinodes.append(antinode)
        antinode = (antinode[0] - vx, antinode[1] - vy)
    antinode = pair[1]
    while is_within_map(antinode, map_width, map_height):
        antinodes.append(antinode)
        antinode = (antinode[0] + vx, antinode[1] + vy)
    
    return antinodes


def vector(pair):
    return (pair[1][0] - pair[0][0], pair[1][1] - pair[0][1])

def find_antinode(first_location, second_location):
    x = 2 * first_location[0] - second_location[0]
    y = 2 * first_location[1] - second_location[1]
    return (x, y)


def is_within_map(location, map_width, map_height):
    return location[0] >= 0 and location[0] < map_width and location[1] >= 0 and location[1] < map_height


frequencies, antennas, map_height, map_width = load_antenna_map(input)

antinode_locations = []

for frequency in frequencies:
    antenna_locations = antennas[frequency]
    antenna_pairs = []
    for i in range(len(antenna_locations) - 1):
        for j in range(i + 1, len(antenna_locations)):
            antenna_pairs.append((antenna_locations[i], antenna_locations[j]))
    for pair in antenna_pairs:
        new_antinodes = find_antinodes(pair, map_width, map_height)
        for antinode_location in new_antinodes:
            if not antinode_location in antinode_locations:
                antinode_locations.append(antinode_location)

print(len(antinode_locations))